// Code generated by MockGen. DO NOT EDIT.
// Source: internal/presentation/cli/cmd.go

// Package cli_test is a generated GoMock package.
package cli_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cli "github.com/ppdx999/kyopro/internal/presentation/cli"
)

// MockCmd is a mock of Cmd interface.
type MockCmd struct {
	ctrl     *gomock.Controller
	recorder *MockCmdMockRecorder
}

// MockCmdMockRecorder is the mock recorder for MockCmd.
type MockCmdMockRecorder struct {
	mock *MockCmd
}

// NewMockCmd creates a new mock instance.
func NewMockCmd(ctrl *gomock.Controller) *MockCmd {
	mock := &MockCmd{ctrl: ctrl}
	mock.recorder = &MockCmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmd) EXPECT() *MockCmdMockRecorder {
	return m.recorder
}

// Description mocks base method.
func (m *MockCmd) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockCmdMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockCmd)(nil).Description))
}

// Name mocks base method.
func (m *MockCmd) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCmdMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCmd)(nil).Name))
}

// Run mocks base method.
func (m *MockCmd) Run(args []string) cli.ExitCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", args)
	ret0, _ := ret[0].(cli.ExitCode)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCmdMockRecorder) Run(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCmd)(nil).Run), args)
}
