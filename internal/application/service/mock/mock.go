// Code generated by MockGen. DO NOT EDIT.
// Source: port_in.go

// Package application_service_mock is a generated GoMock package.
package application_service_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ppdx999/kyopro/internal/domain/model"
)

// MockDownloader is a mock of Downloader interface.
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader.
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance.
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockDownloader) Download() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download")
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockDownloaderMockRecorder) Download() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloader)(nil).Download))
}

// MockIniter is a mock of Initer interface.
type MockIniter struct {
	ctrl     *gomock.Controller
	recorder *MockIniterMockRecorder
}

// MockIniterMockRecorder is the mock recorder for MockIniter.
type MockIniterMockRecorder struct {
	mock *MockIniter
}

// NewMockIniter creates a new mock instance.
func NewMockIniter(ctrl *gomock.Controller) *MockIniter {
	mock := &MockIniter{ctrl: ctrl}
	mock.recorder = &MockIniterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIniter) EXPECT() *MockIniterMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockIniter) Init(c model.ContestId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockIniterMockRecorder) Init(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIniter)(nil).Init), c)
}

// MockLoginer is a mock of Loginer interface.
type MockLoginer struct {
	ctrl     *gomock.Controller
	recorder *MockLoginerMockRecorder
}

// MockLoginerMockRecorder is the mock recorder for MockLoginer.
type MockLoginerMockRecorder struct {
	mock *MockLoginer
}

// NewMockLoginer creates a new mock instance.
func NewMockLoginer(ctrl *gomock.Controller) *MockLoginer {
	mock := &MockLoginer{ctrl: ctrl}
	mock.recorder = &MockLoginerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginer) EXPECT() *MockLoginerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginer) Login() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login")
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockLoginerMockRecorder) Login() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginer)(nil).Login))
}

// MockTester is a mock of Tester interface.
type MockTester struct {
	ctrl     *gomock.Controller
	recorder *MockTesterMockRecorder
}

// MockTesterMockRecorder is the mock recorder for MockTester.
type MockTesterMockRecorder struct {
	mock *MockTester
}

// NewMockTester creates a new mock instance.
func NewMockTester(ctrl *gomock.Controller) *MockTester {
	mock := &MockTester{ctrl: ctrl}
	mock.recorder = &MockTesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTester) EXPECT() *MockTesterMockRecorder {
	return m.recorder
}

// Test mocks base method.
func (m *MockTester) Test() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test")
	ret0, _ := ret[0].(error)
	return ret0
}

// Test indicates an expected call of Test.
func (mr *MockTesterMockRecorder) Test() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockTester)(nil).Test))
}
