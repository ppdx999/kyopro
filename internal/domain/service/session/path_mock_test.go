// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/session/path.go

// Package session_test is a generated GoMock package.
package session_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionPath is a mock of SessionPath interface.
type MockSessionPath struct {
	ctrl     *gomock.Controller
	recorder *MockSessionPathMockRecorder
}

// MockSessionPathMockRecorder is the mock recorder for MockSessionPath.
type MockSessionPathMockRecorder struct {
	mock *MockSessionPath
}

// NewMockSessionPath creates a new mock instance.
func NewMockSessionPath(ctrl *gomock.Controller) *MockSessionPath {
	mock := &MockSessionPath{ctrl: ctrl}
	mock.recorder = &MockSessionPathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionPath) EXPECT() *MockSessionPathMockRecorder {
	return m.recorder
}

// SessionPath mocks base method.
func (m *MockSessionPath) SessionPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionPath indicates an expected call of SessionPath.
func (mr *MockSessionPathMockRecorder) SessionPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionPath", reflect.TypeOf((*MockSessionPath)(nil).SessionPath))
}
