// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/session/port_in.go

// Package session_test is a generated GoMock package.
package session_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInput is a mock of UserInput interface.
type MockUserInput struct {
	ctrl     *gomock.Controller
	recorder *MockUserInputMockRecorder
}

// MockUserInputMockRecorder is the mock recorder for MockUserInput.
type MockUserInputMockRecorder struct {
	mock *MockUserInput
}

// NewMockUserInput creates a new mock instance.
func NewMockUserInput(ctrl *gomock.Controller) *MockUserInput {
	mock := &MockUserInput{ctrl: ctrl}
	mock.recorder = &MockUserInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInput) EXPECT() *MockUserInputMockRecorder {
	return m.recorder
}

// UserInput mocks base method.
func (m *MockUserInput) UserInput() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInput")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInput indicates an expected call of UserInput.
func (mr *MockUserInputMockRecorder) UserInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInput", reflect.TypeOf((*MockUserInput)(nil).UserInput))
}

// MockHome is a mock of Home interface.
type MockHome struct {
	ctrl     *gomock.Controller
	recorder *MockHomeMockRecorder
}

// MockHomeMockRecorder is the mock recorder for MockHome.
type MockHomeMockRecorder struct {
	mock *MockHome
}

// NewMockHome creates a new mock instance.
func NewMockHome(ctrl *gomock.Controller) *MockHome {
	mock := &MockHome{ctrl: ctrl}
	mock.recorder = &MockHomeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHome) EXPECT() *MockHomeMockRecorder {
	return m.recorder
}

// Home mocks base method.
func (m *MockHome) Home() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Home")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Home indicates an expected call of Home.
func (mr *MockHomeMockRecorder) Home() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Home", reflect.TypeOf((*MockHome)(nil).Home))
}

// MockMakePublicDir is a mock of MakePublicDir interface.
type MockMakePublicDir struct {
	ctrl     *gomock.Controller
	recorder *MockMakePublicDirMockRecorder
}

// MockMakePublicDirMockRecorder is the mock recorder for MockMakePublicDir.
type MockMakePublicDirMockRecorder struct {
	mock *MockMakePublicDir
}

// NewMockMakePublicDir creates a new mock instance.
func NewMockMakePublicDir(ctrl *gomock.Controller) *MockMakePublicDir {
	mock := &MockMakePublicDir{ctrl: ctrl}
	mock.recorder = &MockMakePublicDirMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMakePublicDir) EXPECT() *MockMakePublicDirMockRecorder {
	return m.recorder
}

// MakePublicDir mocks base method.
func (m *MockMakePublicDir) MakePublicDir(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePublicDir", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePublicDir indicates an expected call of MakePublicDir.
func (mr *MockMakePublicDirMockRecorder) MakePublicDir(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePublicDir", reflect.TypeOf((*MockMakePublicDir)(nil).MakePublicDir), path)
}

// MockExistFile is a mock of ExistFile interface.
type MockExistFile struct {
	ctrl     *gomock.Controller
	recorder *MockExistFileMockRecorder
}

// MockExistFileMockRecorder is the mock recorder for MockExistFile.
type MockExistFileMockRecorder struct {
	mock *MockExistFile
}

// NewMockExistFile creates a new mock instance.
func NewMockExistFile(ctrl *gomock.Controller) *MockExistFile {
	mock := &MockExistFile{ctrl: ctrl}
	mock.recorder = &MockExistFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExistFile) EXPECT() *MockExistFileMockRecorder {
	return m.recorder
}

// ExistFile mocks base method.
func (m *MockExistFile) ExistFile(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistFile", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistFile indicates an expected call of ExistFile.
func (mr *MockExistFileMockRecorder) ExistFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistFile", reflect.TypeOf((*MockExistFile)(nil).ExistFile), path)
}

// MockReadSecretFile is a mock of ReadSecretFile interface.
type MockReadSecretFile struct {
	ctrl     *gomock.Controller
	recorder *MockReadSecretFileMockRecorder
}

// MockReadSecretFileMockRecorder is the mock recorder for MockReadSecretFile.
type MockReadSecretFileMockRecorder struct {
	mock *MockReadSecretFile
}

// NewMockReadSecretFile creates a new mock instance.
func NewMockReadSecretFile(ctrl *gomock.Controller) *MockReadSecretFile {
	mock := &MockReadSecretFile{ctrl: ctrl}
	mock.recorder = &MockReadSecretFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadSecretFile) EXPECT() *MockReadSecretFileMockRecorder {
	return m.recorder
}

// ReadSecretFile mocks base method.
func (m *MockReadSecretFile) ReadSecretFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSecretFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSecretFile indicates an expected call of ReadSecretFile.
func (mr *MockReadSecretFileMockRecorder) ReadSecretFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSecretFile", reflect.TypeOf((*MockReadSecretFile)(nil).ReadSecretFile), path)
}

// MockWriteSecretFile is a mock of WriteSecretFile interface.
type MockWriteSecretFile struct {
	ctrl     *gomock.Controller
	recorder *MockWriteSecretFileMockRecorder
}

// MockWriteSecretFileMockRecorder is the mock recorder for MockWriteSecretFile.
type MockWriteSecretFileMockRecorder struct {
	mock *MockWriteSecretFile
}

// NewMockWriteSecretFile creates a new mock instance.
func NewMockWriteSecretFile(ctrl *gomock.Controller) *MockWriteSecretFile {
	mock := &MockWriteSecretFile{ctrl: ctrl}
	mock.recorder = &MockWriteSecretFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteSecretFile) EXPECT() *MockWriteSecretFileMockRecorder {
	return m.recorder
}

// WriteSecretFile mocks base method.
func (m *MockWriteSecretFile) WriteSecretFile(path string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSecretFile", path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSecretFile indicates an expected call of WriteSecretFile.
func (mr *MockWriteSecretFileMockRecorder) WriteSecretFile(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSecretFile", reflect.TypeOf((*MockWriteSecretFile)(nil).WriteSecretFile), path, data)
}
