// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/session/port_in.go

// Package session_mock is a generated GoMock package.
package session_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ppdx999/kyopro/internal/domain/model"
)

// MockSessionAsker is a mock of SessionAsker interface.
type MockSessionAsker struct {
	ctrl     *gomock.Controller
	recorder *MockSessionAskerMockRecorder
}

// MockSessionAskerMockRecorder is the mock recorder for MockSessionAsker.
type MockSessionAskerMockRecorder struct {
	mock *MockSessionAsker
}

// NewMockSessionAsker creates a new mock instance.
func NewMockSessionAsker(ctrl *gomock.Controller) *MockSessionAsker {
	mock := &MockSessionAsker{ctrl: ctrl}
	mock.recorder = &MockSessionAskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionAsker) EXPECT() *MockSessionAskerMockRecorder {
	return m.recorder
}

// AskSession mocks base method.
func (m *MockSessionAsker) AskSession() (model.SessionSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskSession")
	ret0, _ := ret[0].(model.SessionSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskSession indicates an expected call of AskSession.
func (mr *MockSessionAskerMockRecorder) AskSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskSession", reflect.TypeOf((*MockSessionAsker)(nil).AskSession))
}

// MockSessionLoader is a mock of SessionLoader interface.
type MockSessionLoader struct {
	ctrl     *gomock.Controller
	recorder *MockSessionLoaderMockRecorder
}

// MockSessionLoaderMockRecorder is the mock recorder for MockSessionLoader.
type MockSessionLoaderMockRecorder struct {
	mock *MockSessionLoader
}

// NewMockSessionLoader creates a new mock instance.
func NewMockSessionLoader(ctrl *gomock.Controller) *MockSessionLoader {
	mock := &MockSessionLoader{ctrl: ctrl}
	mock.recorder = &MockSessionLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionLoader) EXPECT() *MockSessionLoaderMockRecorder {
	return m.recorder
}

// LoadSession mocks base method.
func (m *MockSessionLoader) LoadSession() (model.SessionSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSession")
	ret0, _ := ret[0].(model.SessionSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSession indicates an expected call of LoadSession.
func (mr *MockSessionLoaderMockRecorder) LoadSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSession", reflect.TypeOf((*MockSessionLoader)(nil).LoadSession))
}

// MockSessionSaver is a mock of SessionSaver interface.
type MockSessionSaver struct {
	ctrl     *gomock.Controller
	recorder *MockSessionSaverMockRecorder
}

// MockSessionSaverMockRecorder is the mock recorder for MockSessionSaver.
type MockSessionSaverMockRecorder struct {
	mock *MockSessionSaver
}

// NewMockSessionSaver creates a new mock instance.
func NewMockSessionSaver(ctrl *gomock.Controller) *MockSessionSaver {
	mock := &MockSessionSaver{ctrl: ctrl}
	mock.recorder = &MockSessionSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionSaver) EXPECT() *MockSessionSaverMockRecorder {
	return m.recorder
}

// SaveSession mocks base method.
func (m *MockSessionSaver) SaveSession(arg0 model.SessionSecret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockSessionSaverMockRecorder) SaveSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockSessionSaver)(nil).SaveSession), arg0)
}
