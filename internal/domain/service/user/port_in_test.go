// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/user/port_in.go

// Package user_test is a generated GoMock package.
package user_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoginChecker is a mock of LoginChecker interface.
type MockLoginChecker struct {
	ctrl     *gomock.Controller
	recorder *MockLoginCheckerMockRecorder
}

// MockLoginCheckerMockRecorder is the mock recorder for MockLoginChecker.
type MockLoginCheckerMockRecorder struct {
	mock *MockLoginChecker
}

// NewMockLoginChecker creates a new mock instance.
func NewMockLoginChecker(ctrl *gomock.Controller) *MockLoginChecker {
	mock := &MockLoginChecker{ctrl: ctrl}
	mock.recorder = &MockLoginCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginChecker) EXPECT() *MockLoginCheckerMockRecorder {
	return m.recorder
}

// LoginCheck mocks base method.
func (m *MockLoginChecker) LoginCheck() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginCheck")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginCheck indicates an expected call of LoginCheck.
func (mr *MockLoginCheckerMockRecorder) LoginCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginCheck", reflect.TypeOf((*MockLoginChecker)(nil).LoginCheck))
}

// MockMsgSender is a mock of MsgSender interface.
type MockMsgSender struct {
	ctrl     *gomock.Controller
	recorder *MockMsgSenderMockRecorder
}

// MockMsgSenderMockRecorder is the mock recorder for MockMsgSender.
type MockMsgSenderMockRecorder struct {
	mock *MockMsgSender
}

// NewMockMsgSender creates a new mock instance.
func NewMockMsgSender(ctrl *gomock.Controller) *MockMsgSender {
	mock := &MockMsgSender{ctrl: ctrl}
	mock.recorder = &MockMsgSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgSender) EXPECT() *MockMsgSenderMockRecorder {
	return m.recorder
}

// SendMsg mocks base method.
func (m *MockMsgSender) SendMsg(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMsg", arg0)
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMsgSenderMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMsgSender)(nil).SendMsg), arg0)
}

// MockUserInput is a mock of UserInput interface.
type MockUserInput struct {
	ctrl     *gomock.Controller
	recorder *MockUserInputMockRecorder
}

// MockUserInputMockRecorder is the mock recorder for MockUserInput.
type MockUserInputMockRecorder struct {
	mock *MockUserInput
}

// NewMockUserInput creates a new mock instance.
func NewMockUserInput(ctrl *gomock.Controller) *MockUserInput {
	mock := &MockUserInput{ctrl: ctrl}
	mock.recorder = &MockUserInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInput) EXPECT() *MockUserInputMockRecorder {
	return m.recorder
}

// UserInput mocks base method.
func (m *MockUserInput) UserInput() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInput")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInput indicates an expected call of UserInput.
func (mr *MockUserInputMockRecorder) UserInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInput", reflect.TypeOf((*MockUserInput)(nil).UserInput))
}

// MockHome is a mock of Home interface.
type MockHome struct {
	ctrl     *gomock.Controller
	recorder *MockHomeMockRecorder
}

// MockHomeMockRecorder is the mock recorder for MockHome.
type MockHomeMockRecorder struct {
	mock *MockHome
}

// NewMockHome creates a new mock instance.
func NewMockHome(ctrl *gomock.Controller) *MockHome {
	mock := &MockHome{ctrl: ctrl}
	mock.recorder = &MockHomeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHome) EXPECT() *MockHomeMockRecorder {
	return m.recorder
}

// Home mocks base method.
func (m *MockHome) Home() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Home")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Home indicates an expected call of Home.
func (mr *MockHomeMockRecorder) Home() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Home", reflect.TypeOf((*MockHome)(nil).Home))
}
