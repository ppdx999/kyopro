// Code generated by MockGen. DO NOT EDIT.
// Source: port_out.go

// Package language_test is a generated GoMock package.
package language_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ppdx999/kyopro/internal/domain/model"
)

// MockAllLanguagesFetcher is a mock of AllLanguagesFetcher interface.
type MockAllLanguagesFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockAllLanguagesFetcherMockRecorder
}

// MockAllLanguagesFetcherMockRecorder is the mock recorder for MockAllLanguagesFetcher.
type MockAllLanguagesFetcherMockRecorder struct {
	mock *MockAllLanguagesFetcher
}

// NewMockAllLanguagesFetcher creates a new mock instance.
func NewMockAllLanguagesFetcher(ctrl *gomock.Controller) *MockAllLanguagesFetcher {
	mock := &MockAllLanguagesFetcher{ctrl: ctrl}
	mock.recorder = &MockAllLanguagesFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllLanguagesFetcher) EXPECT() *MockAllLanguagesFetcherMockRecorder {
	return m.recorder
}

// FetchAllLanguages mocks base method.
func (m *MockAllLanguagesFetcher) FetchAllLanguages() ([]model.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllLanguages")
	ret0, _ := ret[0].([]model.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllLanguages indicates an expected call of FetchAllLanguages.
func (mr *MockAllLanguagesFetcherMockRecorder) FetchAllLanguages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllLanguages", reflect.TypeOf((*MockAllLanguagesFetcher)(nil).FetchAllLanguages))
}

// MockFileExister is a mock of FileExister interface.
type MockFileExister struct {
	ctrl     *gomock.Controller
	recorder *MockFileExisterMockRecorder
}

// MockFileExisterMockRecorder is the mock recorder for MockFileExister.
type MockFileExisterMockRecorder struct {
	mock *MockFileExister
}

// NewMockFileExister creates a new mock instance.
func NewMockFileExister(ctrl *gomock.Controller) *MockFileExister {
	mock := &MockFileExister{ctrl: ctrl}
	mock.recorder = &MockFileExisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileExister) EXPECT() *MockFileExisterMockRecorder {
	return m.recorder
}

// ExistFile mocks base method.
func (m *MockFileExister) ExistFile(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistFile", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistFile indicates an expected call of ExistFile.
func (mr *MockFileExisterMockRecorder) ExistFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistFile", reflect.TypeOf((*MockFileExister)(nil).ExistFile), path)
}
