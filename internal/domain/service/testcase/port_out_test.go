// Code generated by MockGen. DO NOT EDIT.
// Source: port_out.go

// Package testcase_test is a generated GoMock package.
package testcase_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWdGetter is a mock of WdGetter interface.
type MockWdGetter struct {
	ctrl     *gomock.Controller
	recorder *MockWdGetterMockRecorder
}

// MockWdGetterMockRecorder is the mock recorder for MockWdGetter.
type MockWdGetterMockRecorder struct {
	mock *MockWdGetter
}

// NewMockWdGetter creates a new mock instance.
func NewMockWdGetter(ctrl *gomock.Controller) *MockWdGetter {
	mock := &MockWdGetter{ctrl: ctrl}
	mock.recorder = &MockWdGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWdGetter) EXPECT() *MockWdGetterMockRecorder {
	return m.recorder
}

// GetWd mocks base method.
func (m *MockWdGetter) GetWd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWd indicates an expected call of GetWd.
func (mr *MockWdGetterMockRecorder) GetWd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWd", reflect.TypeOf((*MockWdGetter)(nil).GetWd))
}

// MockFileExister is a mock of FileExister interface.
type MockFileExister struct {
	ctrl     *gomock.Controller
	recorder *MockFileExisterMockRecorder
}

// MockFileExisterMockRecorder is the mock recorder for MockFileExister.
type MockFileExisterMockRecorder struct {
	mock *MockFileExister
}

// NewMockFileExister creates a new mock instance.
func NewMockFileExister(ctrl *gomock.Controller) *MockFileExister {
	mock := &MockFileExister{ctrl: ctrl}
	mock.recorder = &MockFileExisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileExister) EXPECT() *MockFileExisterMockRecorder {
	return m.recorder
}

// ExistFile mocks base method.
func (m *MockFileExister) ExistFile(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistFile", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistFile indicates an expected call of ExistFile.
func (mr *MockFileExisterMockRecorder) ExistFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistFile", reflect.TypeOf((*MockFileExister)(nil).ExistFile), path)
}

// MockPublicFileReader is a mock of PublicFileReader interface.
type MockPublicFileReader struct {
	ctrl     *gomock.Controller
	recorder *MockPublicFileReaderMockRecorder
}

// MockPublicFileReaderMockRecorder is the mock recorder for MockPublicFileReader.
type MockPublicFileReaderMockRecorder struct {
	mock *MockPublicFileReader
}

// NewMockPublicFileReader creates a new mock instance.
func NewMockPublicFileReader(ctrl *gomock.Controller) *MockPublicFileReader {
	mock := &MockPublicFileReader{ctrl: ctrl}
	mock.recorder = &MockPublicFileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicFileReader) EXPECT() *MockPublicFileReaderMockRecorder {
	return m.recorder
}

// ReadPublicFile mocks base method.
func (m *MockPublicFileReader) ReadPublicFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPublicFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPublicFile indicates an expected call of ReadPublicFile.
func (mr *MockPublicFileReaderMockRecorder) ReadPublicFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPublicFile", reflect.TypeOf((*MockPublicFileReader)(nil).ReadPublicFile), path)
}

// MockChildFileNamesGetter is a mock of ChildFileNamesGetter interface.
type MockChildFileNamesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockChildFileNamesGetterMockRecorder
}

// MockChildFileNamesGetterMockRecorder is the mock recorder for MockChildFileNamesGetter.
type MockChildFileNamesGetterMockRecorder struct {
	mock *MockChildFileNamesGetter
}

// NewMockChildFileNamesGetter creates a new mock instance.
func NewMockChildFileNamesGetter(ctrl *gomock.Controller) *MockChildFileNamesGetter {
	mock := &MockChildFileNamesGetter{ctrl: ctrl}
	mock.recorder = &MockChildFileNamesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChildFileNamesGetter) EXPECT() *MockChildFileNamesGetterMockRecorder {
	return m.recorder
}

// ChildFileNames mocks base method.
func (m *MockChildFileNamesGetter) ChildFileNames(path string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChildFileNames", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChildFileNames indicates an expected call of ChildFileNames.
func (mr *MockChildFileNamesGetterMockRecorder) ChildFileNames(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildFileNames", reflect.TypeOf((*MockChildFileNamesGetter)(nil).ChildFileNames), path)
}

// MockPublicDirMaker is a mock of PublicDirMaker interface.
type MockPublicDirMaker struct {
	ctrl     *gomock.Controller
	recorder *MockPublicDirMakerMockRecorder
}

// MockPublicDirMakerMockRecorder is the mock recorder for MockPublicDirMaker.
type MockPublicDirMakerMockRecorder struct {
	mock *MockPublicDirMaker
}

// NewMockPublicDirMaker creates a new mock instance.
func NewMockPublicDirMaker(ctrl *gomock.Controller) *MockPublicDirMaker {
	mock := &MockPublicDirMaker{ctrl: ctrl}
	mock.recorder = &MockPublicDirMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicDirMaker) EXPECT() *MockPublicDirMakerMockRecorder {
	return m.recorder
}

// MakePublicDir mocks base method.
func (m *MockPublicDirMaker) MakePublicDir(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePublicDir", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePublicDir indicates an expected call of MakePublicDir.
func (mr *MockPublicDirMakerMockRecorder) MakePublicDir(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePublicDir", reflect.TypeOf((*MockPublicDirMaker)(nil).MakePublicDir), path)
}

// MockPublicFileWriter is a mock of PublicFileWriter interface.
type MockPublicFileWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPublicFileWriterMockRecorder
}

// MockPublicFileWriterMockRecorder is the mock recorder for MockPublicFileWriter.
type MockPublicFileWriterMockRecorder struct {
	mock *MockPublicFileWriter
}

// NewMockPublicFileWriter creates a new mock instance.
func NewMockPublicFileWriter(ctrl *gomock.Controller) *MockPublicFileWriter {
	mock := &MockPublicFileWriter{ctrl: ctrl}
	mock.recorder = &MockPublicFileWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicFileWriter) EXPECT() *MockPublicFileWriterMockRecorder {
	return m.recorder
}

// WritePublicFile mocks base method.
func (m *MockPublicFileWriter) WritePublicFile(path string, date []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePublicFile", path, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePublicFile indicates an expected call of WritePublicFile.
func (mr *MockPublicFileWriterMockRecorder) WritePublicFile(path, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePublicFile", reflect.TypeOf((*MockPublicFileWriter)(nil).WritePublicFile), path, date)
}
