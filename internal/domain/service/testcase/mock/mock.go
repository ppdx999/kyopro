// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/testcase/port_in.go

// Package testcase_mock is a generated GoMock package.
package testcase_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ppdx999/kyopro/internal/domain/model"
)

// MockTestCasesGetter is a mock of TestCasesGetter interface.
type MockTestCasesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTestCasesGetterMockRecorder
}

// MockTestCasesGetterMockRecorder is the mock recorder for MockTestCasesGetter.
type MockTestCasesGetterMockRecorder struct {
	mock *MockTestCasesGetter
}

// NewMockTestCasesGetter creates a new mock instance.
func NewMockTestCasesGetter(ctrl *gomock.Controller) *MockTestCasesGetter {
	mock := &MockTestCasesGetter{ctrl: ctrl}
	mock.recorder = &MockTestCasesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCasesGetter) EXPECT() *MockTestCasesGetterMockRecorder {
	return m.recorder
}

// GetTestCases mocks base method.
func (m *MockTestCasesGetter) GetTestCases(contestId model.ContestId, problemId model.ProblemId) ([]*model.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCases", contestId, problemId)
	ret0, _ := ret[0].([]*model.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCases indicates an expected call of GetTestCases.
func (mr *MockTestCasesGetterMockRecorder) GetTestCases(contestId, problemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCases", reflect.TypeOf((*MockTestCasesGetter)(nil).GetTestCases), contestId, problemId)
}

// MockTestCaseSaver is a mock of TestCaseSaver interface.
type MockTestCaseSaver struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseSaverMockRecorder
}

// MockTestCaseSaverMockRecorder is the mock recorder for MockTestCaseSaver.
type MockTestCaseSaverMockRecorder struct {
	mock *MockTestCaseSaver
}

// NewMockTestCaseSaver creates a new mock instance.
func NewMockTestCaseSaver(ctrl *gomock.Controller) *MockTestCaseSaver {
	mock := &MockTestCaseSaver{ctrl: ctrl}
	mock.recorder = &MockTestCaseSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseSaver) EXPECT() *MockTestCaseSaverMockRecorder {
	return m.recorder
}

// SaveTestCase mocks base method.
func (m *MockTestCaseSaver) SaveTestCase(t *model.TestCase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTestCase", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTestCase indicates an expected call of SaveTestCase.
func (mr *MockTestCaseSaverMockRecorder) SaveTestCase(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTestCase", reflect.TypeOf((*MockTestCaseSaver)(nil).SaveTestCase), t)
}
