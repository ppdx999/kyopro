// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/problem/port_in.go

// Package problem_mock is a generated GoMock package.
package problem_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ppdx999/kyopro/internal/domain/model"
)

// MockCurrentProblemLoader is a mock of CurrentProblemLoader interface.
type MockCurrentProblemLoader struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentProblemLoaderMockRecorder
}

// MockCurrentProblemLoaderMockRecorder is the mock recorder for MockCurrentProblemLoader.
type MockCurrentProblemLoaderMockRecorder struct {
	mock *MockCurrentProblemLoader
}

// NewMockCurrentProblemLoader creates a new mock instance.
func NewMockCurrentProblemLoader(ctrl *gomock.Controller) *MockCurrentProblemLoader {
	mock := &MockCurrentProblemLoader{ctrl: ctrl}
	mock.recorder = &MockCurrentProblemLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentProblemLoader) EXPECT() *MockCurrentProblemLoaderMockRecorder {
	return m.recorder
}

// LoadCurrentProblem mocks base method.
func (m *MockCurrentProblemLoader) LoadCurrentProblem() (*model.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCurrentProblem")
	ret0, _ := ret[0].(*model.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCurrentProblem indicates an expected call of LoadCurrentProblem.
func (mr *MockCurrentProblemLoaderMockRecorder) LoadCurrentProblem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCurrentProblem", reflect.TypeOf((*MockCurrentProblemLoader)(nil).LoadCurrentProblem))
}

// MockProblemDirMaker is a mock of ProblemDirMaker interface.
type MockProblemDirMaker struct {
	ctrl     *gomock.Controller
	recorder *MockProblemDirMakerMockRecorder
}

// MockProblemDirMakerMockRecorder is the mock recorder for MockProblemDirMaker.
type MockProblemDirMakerMockRecorder struct {
	mock *MockProblemDirMaker
}

// NewMockProblemDirMaker creates a new mock instance.
func NewMockProblemDirMaker(ctrl *gomock.Controller) *MockProblemDirMaker {
	mock := &MockProblemDirMaker{ctrl: ctrl}
	mock.recorder = &MockProblemDirMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemDirMaker) EXPECT() *MockProblemDirMakerMockRecorder {
	return m.recorder
}

// MakeProblemDir mocks base method.
func (m *MockProblemDirMaker) MakeProblemDir(c model.ContestId, p model.ProblemId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeProblemDir", c, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeProblemDir indicates an expected call of MakeProblemDir.
func (mr *MockProblemDirMakerMockRecorder) MakeProblemDir(c, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeProblemDir", reflect.TypeOf((*MockProblemDirMaker)(nil).MakeProblemDir), c, p)
}

// MockProblemIdsGetter is a mock of ProblemIdsGetter interface.
type MockProblemIdsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockProblemIdsGetterMockRecorder
}

// MockProblemIdsGetterMockRecorder is the mock recorder for MockProblemIdsGetter.
type MockProblemIdsGetterMockRecorder struct {
	mock *MockProblemIdsGetter
}

// NewMockProblemIdsGetter creates a new mock instance.
func NewMockProblemIdsGetter(ctrl *gomock.Controller) *MockProblemIdsGetter {
	mock := &MockProblemIdsGetter{ctrl: ctrl}
	mock.recorder = &MockProblemIdsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemIdsGetter) EXPECT() *MockProblemIdsGetterMockRecorder {
	return m.recorder
}

// GetProblemIds mocks base method.
func (m *MockProblemIdsGetter) GetProblemIds(c model.ContestId) ([]model.ProblemId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemIds", c)
	ret0, _ := ret[0].([]model.ProblemId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemIds indicates an expected call of GetProblemIds.
func (mr *MockProblemIdsGetterMockRecorder) GetProblemIds(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemIds", reflect.TypeOf((*MockProblemIdsGetter)(nil).GetProblemIds), c)
}
