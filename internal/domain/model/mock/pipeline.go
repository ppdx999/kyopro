// Code generated by MockGen. DO NOT EDIT.
// Source: pipeline.go

// Package model_mock is a generated GoMock package.
package model_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInflow is a mock of Inflow interface.
type MockInflow struct {
	ctrl     *gomock.Controller
	recorder *MockInflowMockRecorder
}

// MockInflowMockRecorder is the mock recorder for MockInflow.
type MockInflowMockRecorder struct {
	mock *MockInflow
}

// NewMockInflow creates a new mock instance.
func NewMockInflow(ctrl *gomock.Controller) *MockInflow {
	mock := &MockInflow{ctrl: ctrl}
	mock.recorder = &MockInflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInflow) EXPECT() *MockInflowMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockInflow) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockInflowMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockInflow)(nil).Read), p)
}

// MockOutflow is a mock of Outflow interface.
type MockOutflow struct {
	ctrl     *gomock.Controller
	recorder *MockOutflowMockRecorder
}

// MockOutflowMockRecorder is the mock recorder for MockOutflow.
type MockOutflowMockRecorder struct {
	mock *MockOutflow
}

// NewMockOutflow creates a new mock instance.
func NewMockOutflow(ctrl *gomock.Controller) *MockOutflow {
	mock := &MockOutflow{ctrl: ctrl}
	mock.recorder = &MockOutflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutflow) EXPECT() *MockOutflowMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockOutflow) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockOutflowMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockOutflow)(nil).Write), p)
}

// MockErrFlow is a mock of ErrFlow interface.
type MockErrFlow struct {
	ctrl     *gomock.Controller
	recorder *MockErrFlowMockRecorder
}

// MockErrFlowMockRecorder is the mock recorder for MockErrFlow.
type MockErrFlowMockRecorder struct {
	mock *MockErrFlow
}

// NewMockErrFlow creates a new mock instance.
func NewMockErrFlow(ctrl *gomock.Controller) *MockErrFlow {
	mock := &MockErrFlow{ctrl: ctrl}
	mock.recorder = &MockErrFlowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrFlow) EXPECT() *MockErrFlowMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockErrFlow) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockErrFlowMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockErrFlow)(nil).Write), p)
}
