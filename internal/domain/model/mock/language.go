// Code generated by MockGen. DO NOT EDIT.
// Source: language.go

// Package model_mock is a generated GoMock package.
package model_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ppdx999/kyopro/internal/domain/model"
)

// MockLanguageBuilder is a mock of LanguageBuilder interface.
type MockLanguageBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageBuilderMockRecorder
}

// MockLanguageBuilderMockRecorder is the mock recorder for MockLanguageBuilder.
type MockLanguageBuilderMockRecorder struct {
	mock *MockLanguageBuilder
}

// NewMockLanguageBuilder creates a new mock instance.
func NewMockLanguageBuilder(ctrl *gomock.Controller) *MockLanguageBuilder {
	mock := &MockLanguageBuilder{ctrl: ctrl}
	mock.recorder = &MockLanguageBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguageBuilder) EXPECT() *MockLanguageBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockLanguageBuilder) Build(sourceFile string, p *model.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", sourceFile, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockLanguageBuilderMockRecorder) Build(sourceFile, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockLanguageBuilder)(nil).Build), sourceFile, p)
}

// MockLanguageRunner is a mock of LanguageRunner interface.
type MockLanguageRunner struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageRunnerMockRecorder
}

// MockLanguageRunnerMockRecorder is the mock recorder for MockLanguageRunner.
type MockLanguageRunnerMockRecorder struct {
	mock *MockLanguageRunner
}

// NewMockLanguageRunner creates a new mock instance.
func NewMockLanguageRunner(ctrl *gomock.Controller) *MockLanguageRunner {
	mock := &MockLanguageRunner{ctrl: ctrl}
	mock.recorder = &MockLanguageRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguageRunner) EXPECT() *MockLanguageRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockLanguageRunner) Run(entryFile string, p *model.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", entryFile, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockLanguageRunnerMockRecorder) Run(entryFile, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockLanguageRunner)(nil).Run), entryFile, p)
}

// MockLanguageCleaner is a mock of LanguageCleaner interface.
type MockLanguageCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageCleanerMockRecorder
}

// MockLanguageCleanerMockRecorder is the mock recorder for MockLanguageCleaner.
type MockLanguageCleanerMockRecorder struct {
	mock *MockLanguageCleaner
}

// NewMockLanguageCleaner creates a new mock instance.
func NewMockLanguageCleaner(ctrl *gomock.Controller) *MockLanguageCleaner {
	mock := &MockLanguageCleaner{ctrl: ctrl}
	mock.recorder = &MockLanguageCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguageCleaner) EXPECT() *MockLanguageCleanerMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockLanguageCleaner) Clean(entryFile string, p *model.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", entryFile, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockLanguageCleanerMockRecorder) Clean(entryFile, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockLanguageCleaner)(nil).Clean), entryFile, p)
}
